https://www.geeksforgeeks.org/problems/minimum-cost-path3833/1

class Solution {
    public int minimumCostPath(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dist = new int[n][m];
        for(int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        dist[0][0] = grid[0][0];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0]-b[0]); 
        pq.add(new int[]{grid[0][0], 0, 0});
        int[] dr = {0, 1, 0, -1};
        int[] dc = {1, 0, -1, 0};
        while(!pq.isEmpty()){
            int[] cur = pq.poll();
            int cost = cur[0];
            int x = cur[1];
            int y = cur[2];
            if(x==n-1 && y==m-1) return cost;
            for(int i=0;i<4;i++){
                int nx = x + dr[i];
                int ny = y + dc[i];
                if(nx>=0 && nx<n && ny>=0 && ny<m){
                    int newCost = cost + grid[nx][ny];
                    if(newCost<dist[nx][ny]){
                        dist[nx][ny] = newCost;
                        pq.add(new int[] {newCost,nx,ny});
                    }
                }
            }
        }
        return dist[n-1][m-1];
    }
}