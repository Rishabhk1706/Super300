https://leetcode.com/problems/surrounded-regions/

class Solution {
    public static void dfs(char mat[][], int i, int j, int n, int m){
        if(i<0 || i>=n || j<0 || j>=m || mat[i][j]!='O'){
            return;
        }
        mat[i][j]='S';
        dfs(mat,i+1,j,n,m);
        dfs(mat,i-1,j,n,m);
        dfs(mat,i,j+1,n,m);
        dfs(mat,i,j-1,n,m);
    }
    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;
        for(int r=0;r<n;r++){
            if(board[r][0] == 'O'){
                dfs(board,r,0,n,m);
            }
            if(board[r][m-1] == 'O'){
                dfs(board,r,m-1,n,m);
            }
        }
        for(int c=0;c<m;c++){
            if(board[0][c] == 'O'){
                dfs(board,0,c,n,m);
            }
            if(board[n-1][c] == 'O'){
                dfs(board,n-1,c,n,m);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
                if(board[i][j]=='S'){
                    board[i][j]='O';
                }
            }
        }
    }
}