https://leetcode.com/problems/path-with-minimum-effort/

class Solution {
    public int minimumEffortPath(int[][] heights) {
        int rows = heights.length;
        int cols = heights[0].length;
        int[][] mat = new int[rows][cols];
        for(int[] row : mat){
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        mat[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0]-b[0]);
        pq.add(new int[]{0, 0, 0});
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int currEffort = curr[0];
            int r = curr[1];
            int c = curr[2];
            if(r == rows-1 && c == cols-1) return currEffort;
            if(currEffort > mat[r][c]) continue;
            for(int[] dir : directions){
                int nr = r + dir[0];
                int nc = c + dir[1];
                if(nr>=0 && nr<rows && nc>=0 && nc<cols){
                    int edgeCost = Math.abs(heights[nr][nc] - heights[r][c]);
                    int newEffort = Math.max(currEffort, edgeCost);
                    if(newEffort < mat[nr][nc]){
                        mat[nr][nc] = newEffort;
                        pq.add(new int[]{newEffort, nr, nc});
                    }
                }
            }
        }
        return 0;
    }
}