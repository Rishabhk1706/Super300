https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/

class Solution {
    public int time(HashMap<TreeNode, TreeNode> mpp, TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        HashMap<TreeNode,Integer> visited = new HashMap<>();
        q.add(root);
        visited.put(root,1);
        int maxi=0;
        while(q.size()>0){
            int n = q.size();
            int flag=0;
            for(int i=0;i<n;i++){
                TreeNode curr = q.poll();
                if(curr.left!=null && visited.get(curr.left)==null){
                    flag=1;
                    q.add(curr.left);
                    visited.put(curr.left,1);
                }
                if(curr.right!=null && visited.get(curr.right)==null){
                    flag=1;
                    q.add(curr.right);
                    visited.put(curr.right,1);
                }
                if(mpp.get(curr)!=null && visited.get(mpp.get(curr))==null){
                    flag=1;
                    q.add(mpp.get(curr));
                    visited.put(mpp.get(curr),1);
                }
            }
            if(flag==1) maxi++;
        }
        return maxi;
    }
    public TreeNode parent(HashMap<TreeNode, TreeNode> mpp, TreeNode root, int start){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        TreeNode temp = new TreeNode(-1);
        while(q.size()>0){
            int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode curr = q.poll();
                if(curr.val==start) temp=curr;
                if(curr.left!=null){
                    mpp.put(curr.left,curr);
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    mpp.put(curr.right,curr);
                    q.add(curr.right);
                }
            }
        }
        return temp;
    }
    public int amountOfTime(TreeNode root, int start) {
        if(root.left==null && root.right==null) return 0;
        HashMap<TreeNode,TreeNode> mpp = new HashMap<>();
        TreeNode target = parent(mpp,root,start);
        return time(mpp,target);
    }
}